---
apiVersion: v1
kind: Namespace
metadata:
  name: inference-gateway
  labels:
    inference-gateway.com/managed: "true"
---
apiVersion: core.inference-gateway.com/v1alpha1
kind: Gateway
metadata:
  name: gateway-with-a2a-service-discovery
  namespace: inference-gateway
spec:
  # Core configuration
  replicas: 2
  environment: development

  # Enable telemetry for monitoring
  telemetry:
    enabled: true
    metrics:
      enabled: true
      port: 9464

  # Simple provider configuration
  providers:
    - name: openai
      enabled: true
      env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-providers-secret
              key: OPENAI_API_KEY

  # Agent-to-Agent configuration with Service Discovery
  a2a:
    enabled: true
    expose: false

    # Service Discovery Configuration
    serviceDiscovery:
      enabled: true
      namespace: "agents" # Look for agents in 'agents' namespace
      labelSelector: "inference-gateway.com/a2a-agent=true" # Use default label selector
      pollingInterval: "30s" # Check for new agents every 30 seconds

    # Optional: Manual agent configuration (agents found via service discovery will be added automatically)
    agents:
      - name: calendar-agent
        url: "http://calendar-agent.agents.svc.cluster.local:8080"
        healthCheck:
          enabled: true
          path: "/health"
          interval: "30s"

  # Resource configuration
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "256Mi"
---
# Example secret for AI providers
apiVersion: v1
kind: Secret
metadata:
  name: ai-providers-secret
  namespace: inference-gateway
type: Opaque
stringData:
  OPENAI_API_KEY: "your-openai-api-key-here"
---
# Example A2A agent service that will be discovered automatically
apiVersion: v1
kind: Service
metadata:
  name: email-agent
  namespace: agents
  labels:
    inference-gateway.com/a2a-agent: "true" # This label makes it discoverable
    app: email-agent
spec:
  selector:
    app: email-agent
  ports:
    - port: 8080
      targetPort: 8080
  type: ClusterIP
---
# Example A2A agent deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: email-agent
  namespace: agents
  labels:
    app: email-agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: email-agent
  template:
    metadata:
      labels:
        app: email-agent
    spec:
      containers:
        - name: email-agent
          image: my-registry/email-agent:latest
          ports:
            - containerPort: 8080
          env:
            - name: PORT
              value: "8080"
          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
            limits:
              cpu: "200m"
              memory: "128Mi"
