---
apiVersion: v1
kind: Namespace
metadata:
  name: inference-gateway
  labels:
    inference-gateway.com/managed: "true"
---
apiVersion: core.inference-gateway.com/v1alpha1
kind: Gateway
metadata:
  name: gateway-with-a2a-service-discovery
  namespace: inference-gateway
spec:
  # Core configuration
  replicas: 2
  environment: development

  # Enable telemetry for monitoring
  telemetry:
    enabled: true
    metrics:
      enabled: true
      port: 9464

  # Simple provider configuration
  providers:
    - name: openai
      enabled: true
      env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-providers-secret
              key: OPENAI_API_KEY

  # Agent-to-Agent configuration with Service Discovery
  a2a:
    enabled: true
    expose: false

    # Service Discovery Configuration
    serviceDiscovery:
      enabled: true
      namespace: "agents" # Look for A2A CRDs in 'agents' namespace
      pollingInterval: "30s" # Check for new agents every 30 seconds

    # Optional: Manual agent configuration (agents found via service discovery will be added automatically)
    agents:
      - name: calendar-agent
        url: "http://calendar-agent.agents.svc.cluster.local:8080"
        healthCheck:
          enabled: true
          path: "/health"
          interval: "30s"

  # Resource configuration
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "256Mi"
---
# Example secret for AI providers
apiVersion: v1
kind: Secret
metadata:
  name: ai-providers-secret
  namespace: inference-gateway
type: Opaque
stringData:
  OPENAI_API_KEY: "your-openai-api-key-here"
---
# Example A2A agent that will be discovered automatically via CRD
apiVersion: core.inference-gateway.com/v1alpha1
kind: A2A
metadata:
  name: email-agent
  namespace: agents
spec:
  image: "my-registry/email-agent:latest"
  timezone: "UTC"
  port: 8080
  host: "0.0.0.0"
  readTimeout: "30s"
  writeTimeout: "30s"
  idleTimeout: "120s"
  logging:
    level: "info"
    format: "json"
  telemetry:
    enabled: true
    metrics:
      enabled: true
  queue:
    enabled: false
  tls:
    enabled: false
  agent:
    name: "Email Agent"
    description: "Agent for handling email operations"
    version: "1.0.0"
