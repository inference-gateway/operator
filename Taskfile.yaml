---
version: "3"

vars:
  ROOT_DIR: '{{default "." .ROOT_DIR}}'
  IMG: '{{default "controller:latest" .IMG}}'
  GOBIN:
    sh: |
      if [ -z "$(go env GOBIN)" ]; then
        echo "$(go env GOPATH)/bin"
      else
        echo "$(go env GOBIN)"
      fi
  CONTAINER_TOOL: '{{default "docker" .CONTAINER_TOOL}}'
  LOCALBIN: "{{.ROOT_DIR}}/bin"
  KUSTOMIZE_VERSION: v5.6.0
  CONTROLLER_TOOLS_VERSION: v0.17.2
  ENVTEST_VERSION: "release-0.20"
  ENVTEST_K8S_VERSION: "1.32"
  GOLANGCI_LINT_VERSION: v2.1.5
  KUBECTL: kubectl
  KUSTOMIZE: "{{.LOCALBIN}}/kustomize"
  CONTROLLER_GEN: "{{.LOCALBIN}}/controller-gen"
  ENVTEST: "{{.LOCALBIN}}/setup-envtest"
  GOLANGCI_LINT: "{{.LOCALBIN}}/golangci-lint"
  IGNORE_NOT_FOUND: '{{default "false" .IGNORE_NOT_FOUND}}'
  PLATFORMS: linux/arm64,linux/amd64

tasks:
  default:
    desc: Default task runs build
    deps: [build]

  help:
    desc: Display help for all tasks
    cmds:
      - task --list

  # Development tasks
  manifests:
    desc: Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects
    deps: [controller-gen]
    cmds:
      - '{{.CONTROLLER_GEN}} rbac:roleName=manager-role crd webhook paths="./..." output:crd:artifacts:config=config/crd/bases'

  generate:
    desc: Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations
    deps: [controller-gen]
    cmds:
      - '{{.CONTROLLER_GEN}} object:headerFile="hack/boilerplate.go.txt" paths="./..."'

  fmt:
    desc: Run go fmt against code
    cmds:
      - go fmt ./...

  vet:
    desc: Run go vet against code
    cmds:
      - go vet ./...

  delete-cluster:
    desc: Delete a local Kubernetes cluster
    cmds:
      - ctlptl delete -f Cluster.yaml --cascade=true

  create-cluster:
    desc: Create a local Kubernetes cluster
    cmds:
      - ctlptl apply -f Cluster.yaml

  test:
    desc: Run tests
    deps: [manifests, generate, fmt, vet, setup-envtest]
    cmds:
      - KUBEBUILDER_ASSETS="$({{.ENVTEST}} use {{.ENVTEST_K8S_VERSION}} --bin-dir {{.LOCALBIN}} -p path)" go test $(go list ./... | grep -v /e2e) -coverprofile cover.out

  test-e2e:
    desc: Run the e2e tests using ctlptl with k3d
    deps: [manifests, generate, fmt, vet]
    cmds:
      - |
        if ! command -v ctlptl &>/dev/null; then
          echo "ctlptl is not installed. Please install ctlptl manually."
          exit 1
        fi
      - |
        if ! command -v k3d &>/dev/null; then
          echo "k3d is not installed. Please install k3d manually."
          exit 1
        fi
      - |
        if ! ctlptl get cluster | grep -q 'k3d'; then
          echo "No k3d cluster is running. Please start a k3d cluster with ctlptl before running the e2e tests."
          exit 1
        fi
      - go test ./test/e2e/ -v -ginkgo.v

  lint:
    desc: Run golangci-lint linter
    deps: [golangci-lint]
    cmds:
      - "{{.GOLANGCI_LINT}} run"

  lint-fix:
    desc: Run golangci-lint linter and perform fixes
    deps: [golangci-lint]
    cmds:
      - "{{.GOLANGCI_LINT}} run --fix"

  lint-config:
    desc: Verify golangci-lint linter configuration
    deps: [golangci-lint]
    cmds:
      - "{{.GOLANGCI_LINT}} config verify"

  # Build tasks
  build:
    desc: Build manager binary
    deps: [manifests, generate, fmt, vet]
    cmds:
      - go build -o bin/manager cmd/main.go

  run:
    desc: Run a controller from your host
    deps: [manifests, generate, fmt, vet]
    cmds:
      - go run ./cmd/main.go

  docker-build:
    desc: Build docker image with the manager
    cmds:
      - "{{.CONTAINER_TOOL}} build -t {{.IMG}} ."

  docker-push:
    desc: Push docker image with the manager
    cmds:
      - "{{.CONTAINER_TOOL}} push {{.IMG}}"

  docker-buildx:
    desc: Build and push docker image for the manager for cross-platform support
    cmds:
      - sed -e '1 s/\(^FROM\)/FROM --platform=\$$\{BUILDPLATFORM\}/; t' -e ' 1,// s//FROM --platform=\$$\{BUILDPLATFORM\}/' Dockerfile > Dockerfile.cross
      - "{{.CONTAINER_TOOL}} buildx create --name operator-builder || true"
      - "{{.CONTAINER_TOOL}} buildx use operator-builder"
      - "{{.CONTAINER_TOOL}} buildx build --push --platform={{.PLATFORMS}} --tag {{.IMG}} -f Dockerfile.cross ."
      - "{{.CONTAINER_TOOL}} buildx rm operator-builder || true"
      - rm Dockerfile.cross

  build-installer:
    desc: Generate a consolidated YAML with CRDs and deployment
    deps: [manifests, generate, kustomize]
    cmds:
      - mkdir -p dist
      - cd config/manager && {{.KUSTOMIZE}} edit set image controller={{.IMG}}
      - "{{.KUSTOMIZE}} build config/default > dist/install.yaml"

  # Deployment tasks
  install:
    desc: Install CRDs into the K8s cluster specified in ~/.kube/config
    deps: [manifests, kustomize]
    cmds:
      - "{{.KUSTOMIZE}} build config/crd | {{.KUBECTL}} apply -f -"

  uninstall:
    desc: Uninstall CRDs from the K8s cluster specified in ~/.kube/config
    deps: [manifests, kustomize]
    cmds:
      - "{{.KUSTOMIZE}} build config/crd | {{.KUBECTL}} delete --ignore-not-found={{.IGNORE_NOT_FOUND}} -f -"

  deploy:
    desc: Deploy controller to the K8s cluster specified in ~/.kube/config
    deps: [manifests, kustomize]
    cmds:
      - cd config/manager && {{.KUSTOMIZE}} edit set image controller={{.IMG}}
      - "{{.KUSTOMIZE}} build config/default | {{.KUBECTL}} apply -f -"

  undeploy:
    desc: Undeploy controller from the K8s cluster specified in ~/.kube/config
    deps: [kustomize]
    cmds:
      - "{{.KUSTOMIZE}} build config/default | {{.KUBECTL}} delete --ignore-not-found={{.IGNORE_NOT_FOUND}} -f -"

  # Dependency installation tasks
  ensure-bin-dir:
    desc: Create bin directory if it doesn't exist
    cmds:
      - mkdir -p {{.LOCALBIN}}
    status:
      - test -d {{.LOCALBIN}}

  kustomize:
    desc: Download kustomize locally if necessary
    deps: [ensure-bin-dir]
    status:
      - test -f {{.KUSTOMIZE}}-{{.KUSTOMIZE_VERSION}}
    cmds:
      - |
        set -e
        package=sigs.k8s.io/kustomize/kustomize/v5@{{.KUSTOMIZE_VERSION}}
        echo "Downloading ${package}"
        rm -f {{.KUSTOMIZE}} || true
        GOBIN={{.LOCALBIN}} go install ${package}
        mv {{.KUSTOMIZE}} {{.KUSTOMIZE}}-{{.KUSTOMIZE_VERSION}}
        ln -sf {{.KUSTOMIZE}}-{{.KUSTOMIZE_VERSION}} {{.KUSTOMIZE}}

  controller-gen:
    desc: Download controller-gen locally if necessary
    deps: [ensure-bin-dir]
    status:
      - test -f {{.CONTROLLER_GEN}}-{{.CONTROLLER_TOOLS_VERSION}}
    cmds:
      - |
        set -e
        package=sigs.k8s.io/controller-tools/cmd/controller-gen@{{.CONTROLLER_TOOLS_VERSION}}
        echo "Downloading ${package}"
        # Only remove the symlink if it exists, not the versioned binary
        if [ -L {{.CONTROLLER_GEN}} ]; then
          rm -f {{.CONTROLLER_GEN}}
        fi
        # Check if versioned binary exists
        if [ ! -f {{.CONTROLLER_GEN}}-{{.CONTROLLER_TOOLS_VERSION}} ]; then
          GOBIN={{.LOCALBIN}} go install ${package}
          mv {{.CONTROLLER_GEN}} {{.CONTROLLER_GEN}}-{{.CONTROLLER_TOOLS_VERSION}}
        fi
        # Create symlink if it doesn't exist
        if [ ! -e {{.CONTROLLER_GEN}} ]; then
          ln -sf {{.CONTROLLER_GEN}}-{{.CONTROLLER_TOOLS_VERSION}} {{.CONTROLLER_GEN}}
        fi

  envtest:
    desc: Download setup-envtest locally if necessary
    deps: [ensure-bin-dir]
    status:
      - test -f {{.ENVTEST}}-{{.ENVTEST_VERSION}}
    cmds:
      - |
        set -e
        package=sigs.k8s.io/controller-runtime/tools/setup-envtest@{{.ENVTEST_VERSION}}
        echo "Downloading ${package}"
        # Only remove the symlink if it exists, not the versioned binary
        if [ -L {{.ENVTEST}} ]; then
          rm -f {{.ENVTEST}}
        fi
        # Check if versioned binary exists
        if [ ! -f {{.ENVTEST}}-{{.ENVTEST_VERSION}} ]; then
          GOBIN={{.LOCALBIN}} go install ${package}
          mv {{.ENVTEST}} {{.ENVTEST}}-{{.ENVTEST_VERSION}}
        fi
        # Create symlink if it doesn't exist
        if [ ! -e {{.ENVTEST}} ]; then
          ln -sf {{.ENVTEST}}-{{.ENVTEST_VERSION}} {{.ENVTEST}}
        fi

  setup-envtest:
    desc: Download the binaries required for ENVTEST in the local bin directory
    deps: [envtest]
    cmds:
      - |
        echo "Setting up envtest binaries for Kubernetes version {{.ENVTEST_K8S_VERSION}}..."
        {{.ENVTEST}} use {{.ENVTEST_K8S_VERSION}} --bin-dir {{.LOCALBIN}} -p path || {
          echo "Error: Failed to set up envtest binaries for version {{.ENVTEST_K8S_VERSION}}."
          exit 1
        }

  golangci-lint:
    desc: Download golangci-lint locally if necessary
    deps: [ensure-bin-dir]
    status:
      - test -f {{.GOLANGCI_LINT}}-{{.GOLANGCI_LINT_VERSION}}
    cmds:
      - |
        set -e
        package=github.com/golangci/golangci-lint/v2/cmd/golangci-lint@{{.GOLANGCI_LINT_VERSION}}
        echo "Downloading ${package}"
        rm -f {{.GOLANGCI_LINT}} || true
        GOBIN={{.LOCALBIN}} go install ${package}
        mv {{.GOLANGCI_LINT}} {{.GOLANGCI_LINT}}-{{.GOLANGCI_LINT_VERSION}}
        ln -sf {{.GOLANGCI_LINT}}-{{.GOLANGCI_LINT_VERSION}} {{.GOLANGCI_LINT}}
