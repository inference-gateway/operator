---
version: "3"

vars:
  ROOT_DIR: '{{default "." .ROOT_DIR}}'
  IMG: '{{default "ghcr.io/inference-gateway/operator:latest" .IMG}}'
  GOBIN:
    sh: |
      if [ -z "$(go env GOBIN)" ]; then
        echo "$(go env GOPATH)/bin"
      else
        echo "$(go env GOBIN)"
      fi
  CONTAINER_TOOL: '{{default "docker" .CONTAINER_TOOL}}'
  LOCALBIN: "{{.ROOT_DIR}}/bin"
  KUSTOMIZE_VERSION: v5.6.0
  CONTROLLER_TOOLS_VERSION: v0.17.2
  ENVTEST_VERSION: "release-0.20"
  ENVTEST_K8S_VERSION: "1.32"
  GOLANGCI_LINT_VERSION: v2.1.5
  KUBECTL: kubectl
  KUSTOMIZE: kustomize
  CONTROLLER_GEN: controller-gen
  ENVTEST: setup-envtest
  GOLANGCI_LINT: golangci-lint
  IGNORE_NOT_FOUND: '{{default "false" .IGNORE_NOT_FOUND}}'
  PLATFORMS: linux/arm64,linux/amd64

tasks:
  default:
    desc: Default task runs build
    deps: [build]

  help:
    desc: Display help for all tasks
    cmds:
      - task --list

  # Development tasks
  manifests:
    desc: Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects and installation manifests
    cmds:
      - '{{.CONTROLLER_GEN}} rbac:roleName=manager-role crd webhook paths="./..." output:crd:artifacts:config=config/crd/bases'
      - mkdir -p manifests
      - cd config/operator && {{.KUSTOMIZE}} edit set image ghcr.io/inference-gateway/operator=ghcr.io/inference-gateway/operator:latest
      - "{{.KUSTOMIZE}} build config/crd > manifests/crds.yaml"
      - "{{.KUSTOMIZE}} build config/default > manifests/install.yaml"
      - "{{.KUSTOMIZE}} build config/operator > manifests/namespace-install.yaml"

  generate:
    desc: Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations
    cmds:
      - '{{.CONTROLLER_GEN}} object:headerFile="hack/boilerplate.go.txt" paths="./..."'

  fmt:
    desc: Run go fmt against code
    cmds:
      - go fmt ./...

  vet:
    desc: Run go vet against code
    cmds:
      - go vet ./...

  setup-pre-commit:
    desc: Setup Git pre-commit hook to run lint, generate, manifests, and fmt
    cmds:
      - mkdir -p .git/hooks
      - |
        cat > .git/hooks/pre-commit << 'EOF'
        #!/bin/sh
        echo "Running pre-commit hook..."

        # Run required tasks
        task lint || { echo "Linting failed"; exit 1; }
        task generate || { echo "Code generation failed"; exit 1; }
        task manifests || { echo "Manifest generation failed"; exit 1; }
        task fmt || { echo "Format check failed"; exit 1; }

        echo "Pre-commit hook completed successfully"
        EOF
      - chmod +x .git/hooks/pre-commit
      - echo "Pre-commit hook installed successfully"

  cluster:delete:
    desc: Delete a local Kubernetes cluster
    cmds:
      - ctlptl delete -f Cluster.yaml --cascade=true

  cluster:create:
    desc: Create a local Kubernetes cluster
    cmds:
      - ctlptl apply -f Cluster.yaml

  test:
    desc: Run tests
    deps: [manifests, generate, fmt, vet, ensure-k8s-envtest]
    cmds:
      - KUBEBUILDER_ASSETS="$({{.ENVTEST}} use {{.ENVTEST_K8S_VERSION}} -p path)" go test $(go list ./... | grep -v /e2e) -coverprofile cover.out

  test:e2e:
    desc: Run the e2e tests using ctlptl with k3d
    deps: [manifests, generate, fmt, vet]
    cmds:
      - |
        if ! command -v ctlptl &>/dev/null; then
          echo "ctlptl is not installed. Please install ctlptl manually."
          exit 1
        fi
      - |
        if ! command -v k3d &>/dev/null; then
          echo "k3d is not installed. Please install k3d manually."
          exit 1
        fi
      - |
        if ! ctlptl get cluster | grep -q 'k3d'; then
          echo "No k3d cluster is running. Please start a k3d cluster with ctlptl before running the e2e tests."
          exit 1
        fi
      - go test ./test/e2e/ -v -ginkgo.v

  test:e2e:focus:
    desc: 'Run specific e2e tests using ginkgo focus (usage: task test-e2e-focus FOCUS="test name")'
    deps: [manifests, generate, fmt, vet]
    cmds:
      - |
        if ! command -v ctlptl &>/dev/null; then
          echo "ctlptl is not installed. Please install ctlptl manually."
          exit 1
        fi
      - |
        if ! command -v k3d &>/dev/null; then
          echo "k3d is not installed. Please install k3d manually."
          exit 1
        fi
      - |
        if ! ctlptl get cluster | grep -q 'k3d'; then
          echo "No k3d cluster is running. Please start a k3d cluster with ctlptl before running the e2e tests."
          exit 1
        fi
      - |
        if [ -z "{{.FOCUS}}" ]; then
          echo "Please provide a FOCUS parameter, e.g.: task test-e2e-focus FOCUS=\"creates Gateway with HPA\""
          exit 1
        fi
      - go test ./test/e2e/ -v -ginkgo.v -ginkgo.focus="{{.FOCUS}}"

  lint:
    desc: Run golangci-lint linter
    cmds:
      - "{{.GOLANGCI_LINT}} run"

  lint-fix:
    desc: Run golangci-lint linter and perform fixes
    cmds:
      - "{{.GOLANGCI_LINT}} run --fix"

  lint-config:
    desc: Verify golangci-lint linter configuration
    cmds:
      - "{{.GOLANGCI_LINT}} config verify"

  # Build tasks
  build:
    desc: Build manager binary
    deps: [manifests, generate, fmt, vet]
    cmds:
      - go build -o bin/manager cmd/main.go

  run:
    desc: Run a controller from your host
    deps: [manifests, generate, fmt, vet]
    cmds:
      - go run ./cmd/main.go

  docker-build:
    desc: Build docker image with the manager
    cmds:
      - "{{.CONTAINER_TOOL}} build -t {{.IMG}} ."

  docker-push:
    desc: Push docker image with the manager
    cmds:
      - "{{.CONTAINER_TOOL}} push {{.IMG}}"

  docker-buildx:
    desc: Build and push docker image for the manager for cross-platform support
    cmds:
      - sed -e '1 s/\(^FROM\)/FROM --platform=\$$\{BUILDPLATFORM\}/; t' -e ' 1,// s//FROM --platform=\$$\{BUILDPLATFORM\}/' Dockerfile > Dockerfile.cross
      - "{{.CONTAINER_TOOL}} buildx create --name operator-builder || true"
      - "{{.CONTAINER_TOOL}} buildx use operator-builder"
      - "{{.CONTAINER_TOOL}} buildx build --push --platform={{.PLATFORMS}} --tag {{.IMG}} -f Dockerfile.cross ."
      - "{{.CONTAINER_TOOL}} buildx rm operator-builder || true"
      - rm Dockerfile.cross

  # Deployment tasks
  install:
    desc: Install CRDs into the K8s cluster specified in ~/.kube/config
    deps: [manifests]
    cmds:
      - "{{.KUSTOMIZE}} build config/crd | {{.KUBECTL}} apply -f -"

  uninstall:
    desc: Uninstall CRDs from the K8s cluster specified in ~/.kube/config
    deps: [manifests]
    cmds:
      - "{{.KUSTOMIZE}} build config/crd | {{.KUBECTL}} delete --ignore-not-found={{.IGNORE_NOT_FOUND}} -f -"

  deploy:
    desc: Deploy controller to the K8s cluster specified in ~/.kube/config
    deps: [manifests]
    cmds:
      - cd config/operator && {{.KUSTOMIZE}} edit set image ghcr.io/inference-gateway/operator={{.IMG}}
      - "{{.KUSTOMIZE}} build config/default | {{.KUBECTL}} apply -f -"

  undeploy:
    desc: Undeploy controller from the K8s cluster specified in ~/.kube/config
    cmds:
      - "{{.KUSTOMIZE}} build config/default | {{.KUBECTL}} delete --ignore-not-found={{.IGNORE_NOT_FOUND}} -f -"

  # Dependency installation tasks
  ensure-bin-dir:
    desc: Create bin directory if it doesn't exist (for manager binary)
    cmds:
      - mkdir -p {{.LOCALBIN}}
    status:
      - test -d {{.LOCALBIN}}

  ensure-k8s-envtest:
    desc: Ensure Kubernetes test binaries are available
    cmds:
      - |
        echo "Setting up envtest binaries for Kubernetes version {{.ENVTEST_K8S_VERSION}}..."
        {{.ENVTEST}} use {{.ENVTEST_K8S_VERSION}} -p path || {
          echo "Error: Failed to set up envtest binaries for version {{.ENVTEST_K8S_VERSION}}."
          exit 1
        }

  # Release tasks
  release-dry-run:
    desc: "Run a dry-run of both semantic-release and goreleaser"
    cmds:
      - echo "Running semantic-release dry run..."
      - semantic-release --dry-run
      - echo "Running goreleaser dry run..."
      - goreleaser release --config .goreleaser.yaml --clean --snapshot --verbose

  manifests-for-namespace:
    desc: "Generate manifests for a custom namespace (usage: task manifests-for-namespace NAMESPACE=my-namespace)"
    requires:
      vars: [NAMESPACE]
    deps: [manifests]
    cmds:
      - echo "Generating manifests for namespace {{.NAMESPACE}}"
      - mkdir -p manifests/{{.NAMESPACE}}
      - sed 's/inference-gateway-system/{{.NAMESPACE}}/g' manifests/install.yaml > manifests/{{.NAMESPACE}}/install.yaml
      - sed 's/inference-gateway-system/{{.NAMESPACE}}/g' manifests/namespace-install.yaml > manifests/{{.NAMESPACE}}/namespace-install.yaml
      - cp manifests/crds.yaml manifests/{{.NAMESPACE}}/crds.yaml
      - echo "âœ… Manifests generated in manifests/{{.NAMESPACE}}/"
      - echo "ðŸš€ Deploy with kubectl apply -f manifests/{{.NAMESPACE}}/install.yaml"
